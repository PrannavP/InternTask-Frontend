import axios from "axios";
import { Formik, Field, Form, ErrorMessage } from "formik";
import * as Yup from "yup";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useState } from "react";
import useAuth from "../../hooks/useAuth";

import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

import imageLogo from "../../images/google.png";

const validationSchema = Yup.object({
    billnumber: Yup.string()
        .min(1, "Bill number should be at least 1 character")
        .required("Bill number is required"),

    date: Yup.date()
        .required('Date is required')
        .max(new Date(), 'Date cannot be in the future'),

    itemname: Yup.string()
        .required('Item name is required')
        .min(2, "Item name should contain at least 2 characters"),

    quantity: Yup.number()
        .required("Quantity is required")
        .min(1, "Minimum one quantity should be there"),

    rate: Yup.number()
        .required("Rate is required")
        .min(1, "Minimum one character amount should be there")
});

const PurchaseItemComponent = () => {
    const admin = useAuth();

    const [billDetails, setBillDetails] = useState({ billnumber: '', date: '' });
    const [itemsData, setItemsData] = useState([]);

    const handleItemAdd = (values, resetForm) => {
        if (!billDetails.billnumber || !billDetails.date) {
            setBillDetails({ billnumber: values.billnumber, date: values.date });
        }

        const newItem = {
            itemname: values.itemname,
            quantity: values.quantity,
            rate: values.rate
        };

        setItemsData((prevItems) => [...prevItems, newItem]);

        resetForm({
            values: {
                billnumber: billDetails.billnumber || values.billnumber,
                date: billDetails.date || values.date,
                itemname: '',
                quantity: 0,
                rate: 0
            }
        });
    };

    const generatePDF = () => {
        const doc = new jsPDF();

        doc.addImage(imageLogo, "PNG", 150, 10, 50, 20);

        doc.setFontSize(18);
        doc.text("My Company Pvt Ltd", 14, 20);
    
        doc.setFontSize(16);
        doc.setTextColor("Red");
        doc.text("Purchase Bill", 14, 30);
    
        doc.setFontSize(12);
        doc.setTextColor("Black");
        doc.text(`Bill Number: ${billDetails.billnumber}`, 14, 40);
        doc.text(`Date: ${billDetails.date}`, 14, 48);
    
        const tableColumn = ["SN.", "Item Name", "Quantity", "Rate", "Total"];
        const tableRows = [];
    
        itemsData.forEach((item, index) => {
            const itemData = [
                index + 1,
                item.itemname,
                item.quantity,
                item.rate,
                item.quantity * item.rate,
            ];
            tableRows.push(itemData);
        });
    
        autoTable(doc, {
            startY: 55,
            head: [tableColumn],
            body: tableRows
        });
    
        const totalAmount = itemsData.reduce((sum, item) => sum + item.quantity * item.rate, 0);
        doc.text(`Total Amount: Rs. ${totalAmount}`, 14, doc.lastAutoTable.finalY + 10);

        const generatedTime = new Date().toLocaleString();
        doc.setFontSize(10);
        doc.text(`Generated By: ${admin.email}`, 14, doc.lastAutoTable.finalY + 20);
        doc.text(`Generated Time: ${generatedTime}`, 14, doc.lastAutoTable.finalY + 26);

        doc.text("Signature: ..............", 14, doc.lastAutoTable.finalY + 40);
    
        doc.save(`Purchase_Bill_${billDetails.billnumber}.pdf`);
    };  

    const saveItemPurchaseFnc = async () => {
        if (!billDetails.billnumber || !billDetails.date || itemsData.length === 0) {
            toast.error("Please provide bill details and add at least one item.");
            return;
        }

        const payload = {
            PurchaseMaster: {
                bill_no: billDetails.billnumber,
                date: billDetails.date
            },
            PurchaseDetails: itemsData.map(item => ({
                item_name: item.itemname,
                quantity: item.quantity,
                rate: item.rate
            }))
        };

        try {
            const response = await axios.post("http://localhost:5147/api/purchase/savepurchase", payload);
            if (response.status === 200) {
                toast.success("Purchase saved successfully!");
                generatePDF();

                setBillDetails({ billnumber: '', date: '' });
                setItemsData([]);
            }
        } catch (error) {
            console.error("Error saving purchase:", error);
            toast.error("Failed to save purchase. Please try again.");
        }
    };

    return (
        <div className="purchase-item-container">
            <ToastContainer
                position="top-right"
                autoClose={5000}
                newestOnTop={true}
                closeOnClick={true}
                rtl={false}
                theme="light"
            />
            <div className="purchase-item-fields">
                <Formik
                    initialValues={{
                        billnumber: '',
                        date: '',
                        itemname: '',
                        quantity: 0,
                        rate: 0
                    }}
                    validationSchema={validationSchema}
                    onSubmit={(values, { resetForm }) => {
                        handleItemAdd(values, resetForm);
                    }}
                >
                    <Form>
                        <div>
                            <label htmlFor="billnumber">Bill Number</label>
                            <Field
                                type="text"
                                id="billnumber"
                                name="billnumber"
                                className="form-input"
                                disabled={!!billDetails.billnumber}
                            />
                            <ErrorMessage component="div" name="billnumber" className="error-message" />
                        </div>

                        <div>
                            <label htmlFor="date">Date</label>
                            <Field
                                type="date"
                                id="date"
                                name="date"
                                className="form-input"
                                disabled={!!billDetails.date}
                            />
                            <ErrorMessage component="div" name="date" className="error-message" />
                        </div>

                        <div className="purchase-item-details-field-container">
                            <div>
                                <label htmlFor="itemname">Item Name</label>
                                <Field
                                    type="text"
                                    id="itemname"
                                    name="itemname"
                                    className="form-input"
                                />
                                <ErrorMessage component="div" name="itemname" className="error-message" />
                            </div>

                            <div>
                                <label htmlFor="quantity">Quantity</label>
                                <Field
                                    type="number"
                                    id="quantity"
                                    name="quantity"
                                    className="form-input"
                                />
                                <ErrorMessage component="div" name="quantity" className="error-message" />
                            </div>

                            <div>
                                <label htmlFor="rate">Rate</label>
                                <Field
                                    type="number"
                                    id="rate"
                                    name="rate"
                                    className="form-input"
                                />
                                <ErrorMessage component="div" name="rate" className="error-message" />
                            </div>
                        </div>

                        <button type="submit">Add</button>
                    </Form>
                </Formik>
            </div>

            <div className="items-list">
                <h3>Items List</h3>
                {itemsData.length > 0 ? (
                    <>
                        <table className="items-table">
                            <thead>
                                <tr>
                                    <th>Item Name</th>
                                    <th>Quantity</th>
                                    <th>Rate</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                {itemsData.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.itemname}</td>
                                        <td>{item.quantity}</td>
                                        <td>{item.rate}</td>
                                        <td>{item.quantity * item.rate}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                        <button
                            className="log-details-button"
                            onClick={saveItemPurchaseFnc}
                        >
                            Purchase Item
                        </button>
                    </>
                ) : (
                    <p>No items added yet.</p>
                )}
            </div>
        </div>
    );
};

export default PurchaseItemComponent;